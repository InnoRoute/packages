Index: linux-4.4.121/include/linux/skbuff.h
===================================================================
--- linux-4.4.121.orig/include/linux/skbuff.h
+++ linux-4.4.121/include/linux/skbuff.h
@@ -274,6 +274,7 @@ static inline void skb_frag_size_sub(skb
  */
 struct skb_shared_hwtstamps {
 	ktime_t	hwtstamp;
+	ktime_t	hwtstamp2;
 };
 
 /* Definitions for tx_flags in struct skb_shared_info */
@@ -709,6 +710,9 @@ struct sk_buff {
 				*data;
 	unsigned int		truesize;
 	atomic_t		users;
+	__u32			TN_extended;
+	__u32			TN_TX_queue;
+	__u32			TN_TX_timestamp;
 };
 
 #ifdef __KERNEL__
Index: linux-4.4.121/include/uapi/linux/if_packet.h
===================================================================
--- linux-4.4.121.orig/include/uapi/linux/if_packet.h
+++ linux-4.4.121/include/uapi/linux/if_packet.h
@@ -59,6 +59,9 @@ struct sockaddr_ll {
 #define PACKET_ROLLOVER_STATS		21
 #define PACKET_FANOUT_DATA		22
 #define PACKET_RECV_TYPE		23
+#define PACKET_INR_EXT			666  //devil is in the detail
+#define PACKET_INR_TX_queue		667
+#define PACKET_INR_TX_timestamp	668
 
 #define PACKET_FANOUT_HASH		0
 #define PACKET_FANOUT_LB		1
Index: linux-4.4.121/net/packet/af_packet.c
===================================================================
--- linux-4.4.121.orig/net/packet/af_packet.c
+++ linux-4.4.121/net/packet/af_packet.c
@@ -2540,7 +2540,7 @@ static int tpacket_snd(struct packet_soc
 		skb = sock_alloc_send_skb(&po->sk,
 				hlen + tlen + sizeof(struct sockaddr_ll),
 				!need_wait, &err);
-
+		
 		if (unlikely(skb == NULL)) {
 			/* we assume the socket was initially writeable ... */
 			if (likely(len_sum > 0))
@@ -2567,7 +2567,7 @@ static int tpacket_snd(struct packet_soc
 				goto out_status;
 			}
 		}
-
+		
 		packet_pick_tx_queue(dev, skb);
 
 		skb->destructor = tpacket_destruct_skb;
@@ -2634,6 +2634,9 @@ static struct sk_buff *packet_alloc_skb(
 	skb_put(skb, linear);
 	skb->data_len = len - linear;
 	skb->len += len - linear;
+	skb->TN_extended=sk->INR_EXT;
+	skb->TN_TX_queue=sk->INR_TX_queue;
+	skb->TN_TX_timestamp=sk->INR_TX_timestamp;
 
 	return skb;
 }
@@ -3544,7 +3547,7 @@ packet_setsockopt(struct socket *sock, i
 
 	if (level != SOL_PACKET)
 		return -ENOPROTOOPT;
-
+	
 	switch (optname) {
 	case PACKET_ADD_MEMBERSHIP:
 	case PACKET_DROP_MEMBERSHIP:
@@ -3758,6 +3761,36 @@ packet_setsockopt(struct socket *sock, i
 		po->xmit = val ? packet_direct_xmit : dev_queue_xmit;
 		return 0;
 	}
+	case PACKET_INR_EXT:
+	{	int val;
+
+		if (optlen != sizeof(val))
+			return -EINVAL;
+		if (copy_from_user(&val, optval, sizeof(val)))
+			return -EFAULT;
+		sk->INR_EXT=val;
+		return 0;
+	}
+	case PACKET_INR_TX_queue:
+	{	int val;
+
+		if (optlen != sizeof(val))
+			return -EINVAL;
+		if (copy_from_user(&val, optval, sizeof(val)))
+			return -EFAULT;
+		sk->INR_TX_queue=val;
+		return 0;
+	}
+	case PACKET_INR_TX_timestamp:
+	{	int val;
+
+		if (optlen != sizeof(val))
+			return -EINVAL;
+		if (copy_from_user(&val, optval, sizeof(val)))
+			return -EFAULT;
+		sk->INR_TX_timestamp=val;
+		return 0;
+	}
         case PACKET_RECV_TYPE:
         {
                 unsigned int val;
@@ -3882,6 +3915,15 @@ static int packet_getsockopt(struct sock
 	case PACKET_QDISC_BYPASS:
 		val = packet_use_direct_xmit(po);
 		break;
+	case PACKET_INR_EXT:
+		val = sk->INR_EXT;
+		break;
+	case PACKET_INR_TX_queue:
+		val = sk->INR_TX_queue;
+		break;
+	case PACKET_INR_TX_timestamp:
+		val = sk->INR_TX_timestamp;
+		break;
 	default:
 		return -ENOPROTOOPT;
 	}
Index: linux-4.4.121/include/net/sock.h
===================================================================
--- linux-4.4.121.orig/include/net/sock.h
+++ linux-4.4.121/include/net/sock.h
@@ -241,6 +241,9 @@ struct sock_common {
 		u32		skc_tw_snd_nxt; /* struct tcp_timewait_sock */
 	};
 	/* public: */
+	uint32_t INR_EXT;
+	uint32_t INR_TX_queue;
+	uint32_t INR_TX_timestamp;
 };
 
 struct cg_proto;
@@ -457,6 +460,10 @@ struct sock {
 	int			(*sk_backlog_rcv)(struct sock *sk,
 						  struct sk_buff *skb);
 	void                    (*sk_destruct)(struct sock *sk);
+	uint32_t		INR_EXT;
+	uint32_t		INR_TX_queue;
+	uint32_t		INR_TX_timestamp;
+	
 };
 
 #define __sk_user_data(sk) ((*((void __rcu **)&(sk)->sk_user_data)))
Index: linux-4.4.121/net/core/skbuff.c
===================================================================
--- linux-4.4.121.orig/net/core/skbuff.c
+++ linux-4.4.121/net/core/skbuff.c
@@ -250,6 +250,9 @@ struct sk_buff *__alloc_skb(unsigned int
 	atomic_set(&skb->users, 1);
 	skb->head = data;
 	skb->data = data;
+	skb->TN_extended=0;
+	skb->TN_TX_queue=0;
+	skb->TN_TX_timestamp=0;
 	skb_reset_tail_pointer(skb);
 	skb->end = skb->tail + size;
 	skb->mac_header = (typeof(skb->mac_header))~0U;
Index: linux-4.4.121/include/uapi/linux/errqueue.h
===================================================================
--- linux-4.4.121.orig/include/uapi/linux/errqueue.h
+++ linux-4.4.121/include/uapi/linux/errqueue.h
@@ -30,7 +30,7 @@ struct sock_extended_err {
  *	recvmsg(). See Documentation/networking/timestamping.txt for details.
  */
 struct scm_timestamping {
-	struct timespec ts[3];
+	struct timespec ts[4]; //changed frim 3 to 4 to provide one more timestamp
 };
 
 /* The type of scm_timestamping, passed in sock_extended_err ee_info.
Index: linux-4.4.121/net/socket.c
===================================================================
--- linux-4.4.121.orig/net/socket.c
+++ linux-4.4.121/net/socket.c
@@ -668,7 +668,10 @@ void __sock_recv_timestamp(struct msghdr
 	if (shhwtstamps &&
 	    (sk->sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE) &&
 	    ktime_to_timespec_cond(shhwtstamps->hwtstamp, tss.ts + 2))
+	    {
 		empty = 0;
+		ktime_to_timespec_cond(shhwtstamps->hwtstamp2, tss.ts + 3);//provide one more timestamp
+		}
 	if (!empty)
 		put_cmsg(msg, SOL_SOCKET,
 			 SCM_TIMESTAMPING, sizeof(tss), &tss);
